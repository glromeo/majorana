{"version":3,"sources":["../../src/main/interpreter.js"],"names":["BINARY_OPERATORS","left","right","UNARY_OPERATORS","argument","GETTER","object","property","SETTER","value","TRUE","FALSE","NULL","UNDEFINED","undefined","AST","Expression","constructor","expression","resolve","self","context","AssignmentExpression","target","then","write","TernaryExpression","test","consequent","alternate","BinaryExpression","operator","UnaryExpression","prefix","TypeError","Literals","Identifier","name","Constant","type","text","This","CallExpression","callee","args","apply","$this","MemberExpression","computed","ArrayExpression","ObjectExpression"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,mBAAmB;AACrB,SAAK,CAACC,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KADR;AAErB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KAFR;AAGrB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KAHR;AAIrB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KAJR;AAKrB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KALR;AAMrB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KANR;AAOrB,UAAM,CAACD,IAAD,EAAOC,KAAP,KAAiBD,QAAQC,KAPV;AAQrB,SAAK,CAACD,IAAD,EAAOC,KAAP,KAAiBD,OAAOC,KARR;AASrB,UAAM,CAACD,IAAD,EAAOC,KAAP,KAAiBD,QAAQC,KATV;AAUrB,UAAM,CAACD,IAAD,EAAOC,KAAP,KAAiBD,QAAQC,KAVV;AAWrB,UAAM,CAACD,IAAD,EAAOC,KAAP,KAAiBD,QAAQC;AAXV,CAAzB;;AAcA,MAAMC,kBAAkB;AACpB,SAAMC,QAAD,IAAc,CAACA,QADA;AAEpB,SAAMA,QAAD,IAAc,CAACA,QAFA;AAGpB,SAAMA,QAAD,IAAc,CAACA;AAHA,CAAxB;;AAMA,MAAMC,SAAS,CAACC,MAAD,EAASC,QAAT,KAAsBD,OAAOC,QAAP,CAArC;AACA,MAAMC,SAAS,CAACF,MAAD,EAASC,QAAT,EAAmBE,KAAnB,KAA6BH,OAAOC,QAAP,IAAmBE,KAA/D;;AAEA,MAAMC,OAAO,uBAAQ,IAAR,CAAb;AACA,MAAMC,QAAQ,uBAAQ,KAAR,CAAd;AACA,MAAMC,OAAO,uBAAQ,IAAR,CAAb;AACA,MAAMC,YAAY,uBAAQC,SAAR,CAAlB;;AAEO,MAAMC,oBAAM;;AAEfC,gBAAY,MAAM;;AAEdC,oBAAYC,UAAZ,EAAwB;AACpB,iBAAKA,UAAL,GAAkBA,UAAlB;AACH;;AAEDC,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,KAAKH,UAAL,CAAgBC,OAAhB,CAAwBC,IAAxB,EAA8BC,OAA9B,CAAP;AACH;AARa,KAFH;;AAafC,0BAAsB,MAAM;;AAExBL,oBAAYM,MAAZ,EAAoBd,KAApB,EAA2B;AACvB,iBAAKc,MAAL,GAAcA,MAAd;AACA,iBAAKd,KAAL,GAAaA,KAAb;AACH;;AAEDU,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,KAAKZ,KAAL,CAAWU,OAAX,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCG,IAAlC,CAAuCf,SAAS,KAAKc,MAAL,CAAYE,KAAZ,CAAkBL,IAAlB,EAAwBC,OAAxB,EAAiCZ,KAAjC,CAAhD,CAAP;AACH;AATuB,KAbb;;AAyBfiB,uBAAmB,MAAM;;AAErBT,oBAAYU,IAAZ,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyC;AACrC,iBAAKF,IAAL,GAAYA,IAAZ;AACA,iBAAKC,UAAL,GAAkBA,UAAlB;AACA,iBAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAEDV,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,KAAKM,IAAL,CAAUR,OAAV,CAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCG,IAAjC,CAAsCG,QAAQ;AACjD,oBAAIA,IAAJ,EAAU;AACN,2BAAO,KAAKC,UAAL,CAAgBT,OAAhB,CAAwBC,IAAxB,EAA8BC,OAA9B,CAAP;AACH,iBAFD,MAEO;AACH,2BAAO,KAAKQ,SAAL,CAAeV,OAAf,CAAuBC,IAAvB,EAA6BC,OAA7B,CAAP;AACH;AACJ,aANM,CAAP;AAOH;AAhBoB,KAzBV;;AA4CfS,sBAAkB,MAAM;;AAEpBb,oBAAYc,QAAZ,EAAsB9B,IAAtB,EAA4BC,KAA5B,EAAmC;AAC/B,iBAAK6B,QAAL,GAAgBA,QAAhB;AACA,iBAAK9B,IAAL,GAAYA,IAAZ;AACA,iBAAKC,KAAL,GAAaA,KAAb;AACH;;AAEDiB,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,oBAAK,KAAKpB,IAAL,CAAUkB,OAAV,CAAkBC,IAAlB,EAAwBC,OAAxB,CAAL,EAAuC,KAAKnB,KAAL,CAAWiB,OAAX,CAAmBC,IAAnB,EAAyBC,OAAzB,CAAvC,EAA0ErB,iBAAiB+B,QAAjB,CAA1E,CAAP;AACH;AAVmB,KA5CT;;AAyDfC,qBAAiB,MAAM;;AAEnBf,oBAAYgB,MAAZ,EAAoB7B,QAApB,EAA8B;AAC1B,gBAAI,CAAC6B,MAAL,EAAa;AACT,sBAAMC,UAAU,qCAAV,CAAN;AACH;AACD,iBAAK9B,QAAL,GAAgBA,QAAhB;AACH;;AAEDe,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,KAAKjB,QAAL,CAAce,OAAd,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCG,IAArC,CAA0CrB,gBAAgB4B,QAAhB,CAA1C,CAAP;AACH;AAXkB,KAzDR;;AAuEfI,cAAU;AACN,gBAAQzB,IADF;AAEN,iBAASC,KAFH;AAGN,gBAAQC,IAHF;AAIN,qBAAaC;AAJP,KAvEK;;AA8EfuB,gBAAY,MAAM;;AAEdnB,oBAAYoB,IAAZ,EAAkB;AACd,iBAAKA,IAAL,GAAYA,IAAZ;AACH;;AAEDlB,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,uBAAQA,QAAQ,KAAKgB,IAAb,CAAR,CAAP;AACH;;AAEDZ,cAAML,IAAN,EAAYC,OAAZ,EAAqBZ,KAArB,EAA4B;AACxB,mBAAO,uBAAQY,QAAQ,KAAKgB,IAAb,IAAqB5B,KAA7B,CAAP;AACH;AAZa,KA9EH;;AA6Ff6B,cAAU,MAAM;;AAEZrB,oBAAYsB,IAAZ,EAAkBC,IAAlB,EAAwB;AACpB,iBAAKD,IAAL,GAAYA,IAAZ;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AACH;;AAEDrB,kBAAU;AACN,mBAAO,uBAAQ,KAAKoB,IAAL,CAAU,KAAKC,IAAf,CAAR,CAAP;AACH;AATW,KA7FD;;AAyGfC,UAAM;;AAEFtB,gBAAQC,IAAR,EAAc;AACV,mBAAO,uBAAQA,IAAR,CAAP;AACH,SAJC;;AAMFK,cAAML,IAAN,EAAYC,OAAZ,EAAqBZ,KAArB,EAA4B;AACxB,mBAAO,uBAAQW,KAAK,KAAKiB,IAAV,IAAkB5B,KAA1B,CAAP;AACH;AARC,KAzGS;;AAoHfiC,oBAAgB,MAAM;;AAElBzB,oBAAY0B,MAAZ,EAAoBC,IAApB,EAA0B;AACtB,iBAAKD,MAAL,GAAcA,MAAd;AACA,iBAAKC,IAAL,GAAYA,IAAZ;AACH;;AAEDzB,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,mBAAO,KAAKsB,MAAL,CAAYxB,OAAZ,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCG,IAAnC,CAAwCmB,UAAU,mBAAI,KAAKC,IAAT,EAAepB,IAAf,CAAoBoB,QAAQ;AACjF,uBAAOD,OAAOE,KAAP,CAAaxB,QAAQyB,KAAR,CAAb,EAA6BF,IAA7B,CAAP;AACH,aAFwD,CAAlD,CAAP;AAGH;AAXiB,KApHP;;AAkIfG,sBAAkB,MAAM;;AAEpB9B,oBAAYX,MAAZ,EAAoBC,QAApB,EAA8ByC,QAA9B,EAAwC;AACpC,iBAAK1C,MAAL,GAAcA,MAAd;AACA,iBAAKC,QAAL,GAAgBA,QAAhB;AACA,iBAAKyC,QAAL,GAAgBA,QAAhB;AACH;;AAED7B,gBAAQC,IAAR,EAAcC,OAAd,EAAuB;AACnB,gBAAI,KAAK2B,QAAT,EAAmB;AACf,uBAAO,oBAAK,KAAK1C,MAAL,CAAYa,OAAZ,CAAoBC,IAApB,EAA0BC,OAA1B,CAAL,EAAyC,KAAKd,QAAL,CAAcY,OAAd,CAAsBC,IAAtB,EAA4BC,OAA5B,CAAzC,EAA+EhB,MAA/E,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,oBAAK,KAAKC,MAAL,CAAYa,OAAZ,CAAoBC,IAApB,EAA0BC,OAA1B,CAAL,EAAyC,KAAKd,QAAL,CAAcE,KAAvD,EAA8DJ,MAA9D,CAAP;AACH;AACJ;;AAEDoB,cAAML,IAAN,EAAYC,OAAZ,EAAqBZ,KAArB,EAA4B;AACxB,gBAAI,KAAKuC,QAAT,EAAmB;AACf,uBAAO,oBAAK,KAAK1C,MAAL,CAAYa,OAAZ,CAAoBC,IAApB,EAA0BC,OAA1B,CAAL,EAAyC,KAAKd,QAAL,CAAcY,OAAd,CAAsBC,IAAtB,EAA4BC,OAA5B,CAAzC,EAA+EZ,KAA/E,EAAsFD,MAAtF,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,oBAAK,KAAKF,MAAL,CAAYa,OAAZ,CAAoBC,IAApB,EAA0BC,OAA1B,CAAL,EAAyC,KAAKd,QAAL,CAAcE,KAAvD,EAA8DA,KAA9D,EAAqED,MAArE,CAAP;AACH;AACJ;AAtBmB,KAlIT;;AA2JfyC,qBAAiB,IA3JF;AA4JfC,sBAAkB;AA5JH,CAAZ","file":"interpreter.js","sourcesContent":["import {all, join, resolve} from \"bluebird\";\n\nconst BINARY_OPERATORS = {\n    '+': (left, right) => left + right,\n    '-': (left, right) => left - right,\n    '*': (left, right) => left * right,\n    '/': (left, right) => left / right,\n    '%': (left, right) => left % right,\n    '<': (left, right) => left < right,\n    '<=': (left, right) => left <= right,\n    '>': (left, right) => left > right,\n    '>=': (left, right) => left >= right,\n    '&&': (left, right) => left && right,\n    '||': (left, right) => left || right,\n};\n\nconst UNARY_OPERATORS = {\n    '+': (argument) => +argument,\n    '-': (argument) => -argument,\n    '!': (argument) => !argument,\n};\n\nconst GETTER = (object, property) => object[property];\nconst SETTER = (object, property, value) => object[property] = value;\n\nconst TRUE = resolve(true);\nconst FALSE = resolve(false);\nconst NULL = resolve(null);\nconst UNDEFINED = resolve(undefined);\n\nexport const AST = {\n\n    Expression: class {\n\n        constructor(expression) {\n            this.expression = expression;\n        }\n\n        resolve(self, context) {\n            return this.expression.resolve(self, context);\n        }\n    },\n\n    AssignmentExpression: class {\n\n        constructor(target, value) {\n            this.target = target;\n            this.value = value;\n        }\n\n        resolve(self, context) {\n            return this.value.resolve(self, context).then(value => this.target.write(self, context, value));\n        }\n    },\n\n    TernaryExpression: class {\n\n        constructor(test, consequent, alternate) {\n            this.test = test;\n            this.consequent = consequent;\n            this.alternate = alternate;\n        }\n\n        resolve(self, context) {\n            return this.test.resolve(self, context).then(test => {\n                if (test) {\n                    return this.consequent.resolve(self, context);\n                } else {\n                    return this.alternate.resolve(self, context);\n                }\n            });\n        }\n    },\n\n    BinaryExpression: class {\n\n        constructor(operator, left, right) {\n            this.operator = operator;\n            this.left = left;\n            this.right = right;\n        }\n\n        resolve(self, context) {\n            return join(this.left.resolve(self, context), this.right.resolve(self, context), BINARY_OPERATORS[operator]);\n        }\n    },\n\n    UnaryExpression: class {\n\n        constructor(prefix, argument) {\n            if (!prefix) {\n                throw TypeError(\"unsupported operator: postfix unary\");\n            }\n            this.argument = argument;\n        }\n\n        resolve(self, context) {\n            return this.argument.resolve(self, context).then(UNARY_OPERATORS[operator]);\n        }\n    },\n\n    Literals: {\n        'true': TRUE,\n        'false': FALSE,\n        'null': NULL,\n        'undefined': UNDEFINED\n    },\n\n    Identifier: class {\n\n        constructor(name) {\n            this.name = name;\n        }\n\n        resolve(self, context) {\n            return resolve(context[this.name]);\n        }\n\n        write(self, context, value) {\n            return resolve(context[this.name] = value);\n        }\n    },\n\n    Constant: class {\n\n        constructor(type, text) {\n            this.type = type;\n            this.text = text;\n        }\n\n        resolve() {\n            return resolve(this.type(this.text));\n        }\n    },\n\n    This: {\n\n        resolve(self) {\n            return resolve(self);\n        },\n\n        write(self, context, value) {\n            return resolve(self[this.name] = value);\n        }\n    },\n\n    CallExpression: class {\n\n        constructor(callee, args) {\n            this.callee = callee;\n            this.args = args;\n        }\n\n        resolve(self, context) {\n            return this.callee.resolve(self, context).then(callee => all(this.args).then(args => {\n                return callee.apply(context[$this], args);\n            }));\n        }\n    },\n\n    MemberExpression: class {\n\n        constructor(object, property, computed) {\n            this.object = object;\n            this.property = property;\n            this.computed = computed;\n        }\n\n        resolve(self, context) {\n            if (this.computed) {\n                return join(this.object.resolve(self, context), this.property.resolve(self, context), GETTER);\n            } else {\n                return join(this.object.resolve(self, context), this.property.value, GETTER);\n            }\n        }\n\n        write(self, context, value) {\n            if (this.computed) {\n                return join(this.object.resolve(self, context), this.property.resolve(self, context), value, SETTER);\n            } else {\n                return join(this.object.resolve(self, context), this.property.value, value, SETTER);\n            }\n        }\n    },\n\n    ArrayExpression: null,\n    ObjectExpression: null\n};\n"]}