{"version":3,"sources":["../../src/main/operators.js"],"names":["binary","symbol","Function","Operators","Assignment","callback","index","value","pending","object","member","Logical","Equality","Relational","Additive","Multiplicative","Unary","argument"],"mappings":";;;;;AAAA,SAASA,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,WAAO,IAAIC,QAAJ,CAAa,UAAb,EAAyB,OAAzB,EAAkC,OAAlC,EAA4C;;;qCAGlBD,MAAO;;MAHjC,CAAP;AAMH;;AAEM,MAAME,gCAAY;;AAErBC,gBAAY;AACR,aAAK,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;AACnCF,qBAASC,KAAT,IAAkBC,KAAlB;AACA,gBAAI,EAAEF,SAASG,OAAX,KAAuB,CAA3B,EAA8B;AAC1BH,yBAASA,SAASI,MAAT,CAAgBJ,SAASK,MAAzB,IAAmCL,SAASE,KAArD;AACH;AACJ;AANO,KAFS;;AAWrBI,aAAS;AACL,cAAMX,OAAO,IAAP,CADD;AAEL,cAAMA,OAAO,IAAP;AAFD,KAXY;;AAgBrBY,cAAU;AACN,cAAMZ,OAAO,IAAP,CADA;AAEN,eAAOA,OAAO,KAAP,CAFD;AAGN,cAAMA,OAAO,IAAP,CAHA;AAIN,eAAOA,OAAO,KAAP;AAJD,KAhBW;;AAuBrBa,gBAAY;AACR,aAAKb,OAAO,GAAP,CADG;AAER,cAAMA,OAAO,IAAP,CAFE;AAGR,aAAKA,OAAO,GAAP,CAHG;AAIR,cAAMA,OAAO,IAAP;AAJE,KAvBS;;AA8BrBc,cAAU;AACN,aAAKd,OAAO,GAAP,CADC;AAEN,aAAKA,OAAO,GAAP;AAFC,KA9BW;;AAmCrBe,oBAAgB;AACZ,aAAKf,OAAO,GAAP,CADO;AAEZ,aAAKA,OAAO,GAAP,CAFO;AAGZ,aAAKA,OAAO,GAAP;AAHO,KAnCK;;AAyCrBgB,WAAO;AACH,aAAK,UAAUX,QAAV,EAAoBY,QAApB,EAA8B;AAC/BZ,qBAAS,CAACY,QAAV;AACH,SAHE;AAIH,aAAK,UAAUZ,QAAV,EAAoBY,QAApB,EAA8B;AAC/BZ,qBAAS,CAACY,QAAV;AACH,SANE;AAOH,aAAK,UAAUZ,QAAV,EAAoBY,QAApB,EAA8B;AAC/BZ,qBAAS,CAACY,QAAV;AACH;AATE;AAzCc,CAAlB","file":"operators.js","sourcesContent":["function binary(symbol) {\n    return new Function(\"callback\", \"field\", \"value\", `{\n        callback[field] = value;\n        if (--callback.pending === 0) {\n            callback(callback.left ${symbol} callback.right);\n        }\n    }`);\n}\n\nexport const Operators = {\n\n    Assignment: {\n        '=': function (callback, index, value) {\n            callback[index] = value;\n            if (--callback.pending === 0) {\n                callback(callback.object[callback.member] = callback.value);\n            }\n        }\n    },\n\n    Logical: {\n        '&&': binary('&&'),\n        '||': binary('||')\n    },\n\n    Equality: {\n        '==': binary('=='),\n        '===': binary('==='),\n        '!=': binary('!='),\n        '!==': binary('!==')\n    },\n\n    Relational: {\n        '<': binary('<'),\n        '<=': binary('<='),\n        '>': binary('>'),\n        '>=': binary('>=')\n    },\n\n    Additive: {\n        '+': binary('+'),\n        '-': binary('-')\n    },\n\n    Multiplicative: {\n        '*': binary('*'),\n        '/': binary('/'),\n        '%': binary('%')\n    },\n\n    Unary: {\n        '+': function (callback, argument) {\n            callback(+argument);\n        },\n        '-': function (callback, argument) {\n            callback(-argument);\n        },\n        '!': function (callback, argument) {\n            callback(!argument);\n        }\n    }\n};\n"]}