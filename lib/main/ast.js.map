{"version":3,"sources":["../../src/main/ast.js"],"names":["BINARY_OPERATORS","left","right","UNARY_OPERATORS","argument","GETTER","object","property","SETTER","value","TRUE","FALSE","NULL","UNDEFINED","undefined","promisesCache","WeakMap","AST","Expression","constructor","expression","resolve","self","context","AssignmentExpression","target","then","write","CommaExpression","expressions","map","e","last","length","TernaryExpression","test","consequent","alternate","BinaryExpression","operator","UnaryExpression","prefix","TypeError","Literals","get","set","Identifier","text","Constant","type","CallExpression","callee","args","apply","MemberExpression","computed","ArrayExpression","elements","Property","key","ObjectExpression","properties","p","parameters","Map","initializer","Function","keys","substring","values","v"],"mappings":"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","file":"ast.js","sourcesContent":["import {all, join, resolve} from \"bluebird\";\n\nconst BINARY_OPERATORS = {\n    '+': (left, right) => left + right,\n    '-': (left, right) => left - right,\n    '*': (left, right) => left * right,\n    '/': (left, right) => left / right,\n    '%': (left, right) => left % right,\n    '<': (left, right) => left < right,\n    '<=': (left, right) => left <= right,\n    '>': (left, right) => left > right,\n    '>=': (left, right) => left >= right,\n    '&&': (left, right) => left && right,\n    '||': (left, right) => left || right,\n};\n\nconst UNARY_OPERATORS = {\n    '+': (argument) => +argument,\n    '-': (argument) => -argument,\n    '!': (argument) => !argument,\n};\n\nconst GETTER = (object, property) => object[property];\nconst SETTER = (object, property, value) => object[property] = value;\n\nconst TRUE = resolve(true);\nconst FALSE = resolve(false);\nconst NULL = resolve(null);\nconst UNDEFINED = resolve(undefined);\n\nconst promisesCache = new WeakMap();\n\nexport const AST = {\n\n    Expression: class {\n\n        constructor(expression) {\n            this.expression = expression;\n        }\n\n        resolve(self, context) {\n            return this.expression.resolve(self, context);\n        }\n    },\n\n    AssignmentExpression: class {\n\n        constructor(target, value) {\n            this.target = target;\n            this.value = value;\n        }\n\n        resolve(self, context) {\n            return this.value.resolve(self, context).then(value => this.target.write(self, context, value));\n        }\n    },\n\n    CommaExpression: class {\n\n        constructor(expressions) {\n            this.expressions = expressions;\n        }\n\n        resolve(self, context) {\n            return all(this.expressions.map(e => e.resolve(self, context))).then(this.last);\n        }\n\n        last(expressions) {\n            return expressions[expressions.length - 1];\n        }\n    },\n\n    TernaryExpression: class {\n\n        constructor(test, consequent, alternate) {\n            this.test = test;\n            this.consequent = consequent;\n            this.alternate = alternate;\n        }\n\n        resolve(self, context) {\n            return this.test.resolve(self, context).then(test => {\n                if (test) {\n                    return this.consequent.resolve(self, context);\n                } else {\n                    return this.alternate.resolve(self, context);\n                }\n            });\n        }\n    },\n\n    BinaryExpression: class {\n\n        constructor(operator, left, right) {\n            this.operator = operator;\n            this.left = left;\n            this.right = right;\n        }\n\n        resolve(self, context) {\n            return join(this.left.resolve(self, context), this.right.resolve(self, context), BINARY_OPERATORS[operator]);\n        }\n    },\n\n    UnaryExpression: class {\n\n        constructor(prefix, argument) {\n            if (!prefix) {\n                throw TypeError(\"unsupported operator: postfix unary\");\n            }\n            this.argument = argument;\n        }\n\n        resolve(self, context) {\n            return this.argument.resolve(self, context).then(UNARY_OPERATORS[operator]);\n        }\n    },\n\n    Literals: {\n        'true': TRUE,\n        'false': FALSE,\n        'null': NULL,\n        'undefined': UNDEFINED,\n        'this': {\n            resolve(self) {\n                return promisesCache.get(self) || promisesCache.set(self, resolve(self)).get(self);\n            }\n        }\n    },\n\n    Identifier: class {\n\n        constructor(text) {\n            this.text = text;\n        }\n\n        resolve(self, context) {\n            return resolve(context[this.text]);\n        }\n\n        write(self, context, value) {\n            return resolve(context[this.text] = value);\n        }\n    },\n\n    Constant: class {\n\n        constructor(type, text) {\n            this.type = type;\n            this.text = text;\n        }\n\n        resolve() {\n            return resolve(this.type(this.text));\n        }\n    },\n\n    CallExpression: class {\n\n        constructor(callee, args) {\n            this.callee = callee;\n            this.args = args;\n        }\n\n        resolve(self, context) {\n            return this.callee.resolve(self, context).then(callee => all(this.args).then(args => {\n                return callee.apply(self, args);\n            }));\n        }\n    },\n\n    MemberExpression: class {\n\n        constructor(object, property, computed) {\n            this.object = object;\n            this.property = property;\n            this.computed = computed;\n        }\n\n        resolve(self, context) {\n            if (this.computed) {\n                return join(this.object.resolve(self, context), this.property.resolve(self, context), GETTER);\n            } else {\n                return join(this.object.resolve(self, context), this.property.text, GETTER);\n            }\n        }\n\n        write(self, context, value) {\n            if (this.computed) {\n                return join(this.object.resolve(self, context), this.property.resolve(self, context), value, SETTER);\n            } else {\n                return join(this.object.resolve(self, context), this.property.text, value, SETTER);\n            }\n        }\n    },\n\n    ArrayExpression: class {\n\n        constructor(elements) {\n            this.elements = elements;\n        }\n\n        resolve(self, context) {\n            return all(this.elements.map(e => e.resolve(self, context)));\n        }\n    },\n\n    Property: class {\n        constructor(key, value, computed) {\n            this.key = key;\n            this.value = value;\n            this.computed = computed;\n        }\n    },\n\n    ObjectExpression: class {\n\n        constructor(properties) {\n            if (!properties.length) {\n                return;\n            }\n            let p = 0, property, parameters = new Map();\n            let initializer = \"\";\n            for (property of properties) {\n                if (property.computed) {\n                    parameters.set(\"pk\" + p, property.key);\n                    parameters.set(\"pv\" + p, property.value);\n                    initializer += \",\\n\\t[pk\" + p + \"]: pv\" + p;\n                } else {\n                    parameters.set(\"pv\" + p, property.value);\n                    initializer += \",\\n\\t\" + property.key.text + \": pv\" + p;\n                }\n                ++p;\n            }\n            this.initializer = new Function(...parameters.keys(), \"return {\" + initializer.substring(1) + \"\\n};\");\n            this.parameters = parameters.values();\n        }\n\n        resolve(self, context) {\n            return all(this.parameters.map(v => v.resolve(self, context))).then(this.initializer);\n        }\n\n        initializer() {\n            return {};\n        }\n    }\n};\n"]}