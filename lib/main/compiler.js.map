{"version":3,"sources":["../../src/main/compiler.js"],"names":["AsyncFunction","Object","getPrototypeOf","constructor","globalEval","eval","BinaryExpression","operators","operator","left","right","context","UnaryExpression","prefix","argument","TypeError","AST","Expression","expression","that","create","value","AssignmentExpression","write","CommaExpression","expressions","TernaryExpression","test","consequent","alternate","LogicalExpression","Logical","EqualityExpression","Equality","RelationalExpression","Relational","AdditiveExpression","Additive","MultiplicativeExpression","Multiplicative","Unary","Literals","undefined","Identifier","text","name","symbol","Constant","type","CallExpression","callee","parameters","args","parameter","push","apply","MemberExpression","object","member","computed","ArrayExpression","elements","v","Array","length","element","Property","key","then","ObjectExpression","properties","property"],"mappings":"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","file":"compiler.js","sourcesContent":["import {Operators} from \"./operators\";\n\nconst AsyncFunction = Object.getPrototypeOf(async function () {\n}).constructor;\n\nconst globalEval = eval;\n\nconst BinaryExpression = (operators) => class {\n\n    constructor(operator, left, right) {\n        this.operator = operators[operator];\n        this.left = left;\n        this.right = right;\n    }\n\n    eval(context) {\n        return this.operator(\n            this.left.eval(context),\n            this.right.eval(context)\n        );\n    }\n\n};\n\nconst UnaryExpression = (operators) => class {\n\n    constructor(prefix, operator, argument) {\n        if (!prefix) {\n            throw TypeError(\"unsupported operator: postfix unary\");\n        }\n        this.operator = operators[operator];\n        this.argument = argument;\n    }\n\n    eval(context) {\n        return this.operator(this.argument.eval(context));\n    }\n};\n\nexport const AST = {\n\n    Expression: class {\n\n        constructor(expression) {\n            this.expression = expression;\n        }\n\n        eval(that, context) {\n            return this.expression.eval(Object.create(context || null, {\n                that: {value: that}\n            }));\n        }\n    },\n\n    AssignmentExpression: class {\n\n        constructor(left, right) {\n            this.left = left;\n            this.right = right;\n        }\n\n        eval(context) {\n            return this.left.write(context, this.right.eval(context));\n        }\n    },\n\n    CommaExpression: class {\n\n        constructor(expressions) {\n            this.expressions = expressions;\n        }\n\n        eval(context) {\n            let value;\n            for (const expression of this.expressions) {\n                value = expression.eval(context);\n            }\n            return value;\n        }\n    },\n\n    TernaryExpression: class {\n\n        constructor(test, consequent, alternate) {\n            this.test = test;\n            this.consequent = consequent;\n            this.alternate = alternate;\n        }\n\n        async eval(context) {\n            if (await this.test.eval(context)) {\n                return this.consequent.eval(context);\n            } else {\n                return this.alternate.eval(context);\n            }\n        }\n    },\n\n    LogicalExpression: BinaryExpression(Operators.Logical),\n\n    EqualityExpression: BinaryExpression(Operators.Equality),\n\n    RelationalExpression: BinaryExpression(Operators.Relational),\n\n    AdditiveExpression: BinaryExpression(Operators.Additive),\n\n    MultiplicativeExpression: BinaryExpression(Operators.Multiplicative),\n\n    UnaryExpression: UnaryExpression(Operators.Unary),\n\n    Literals: {\n        'true': {eval: () => true},\n        'false': {eval: () => false},\n        'null': {eval: () => null},\n        'undefined': {eval: () => undefined},\n        'this': {eval: context => context.that}\n    },\n\n    Identifier: class {\n\n        constructor(text) {\n            this.name = text;\n        }\n\n        eval(context) {\n            return context[this.name];\n        }\n\n        async write(context, value) {\n            return context[this.name] = await value;\n        }\n\n        symbol() {\n            return this.name;\n        }\n    },\n\n    Constant: class {\n\n        constructor(type, text) {\n            this.type = type;\n            this.text = text;\n        }\n\n        eval() {\n            return globalEval(this.text);\n        }\n\n        symbol() {\n            return this.text;\n        }\n    },\n\n    CallExpression: class {\n\n        constructor(callee, parameters) {\n            this.callee = callee;\n            this.parameters = parameters;\n        }\n\n        async eval(context) {\n            const callee = await this.callee.eval(context), args = [];\n            for (const parameter of this.parameters) {\n                args.push(await parameter.eval(context));\n            }\n            return callee.apply(context.that, args);\n        }\n    },\n\n    MemberExpression: class {\n\n        constructor(object, member, computed) {\n            this.object = object;\n            this.member = member;\n            this.computed = computed;\n        }\n\n        async eval(context) {\n            const object = await this.object.eval(context);\n            if (this.computed) {\n                return object[(await this.member.eval(context))];\n            } else {\n                return object[this.member.symbol()];\n            }\n        }\n\n        async write(context, value) {\n            const object = await this.object.eval(context);\n            if (this.computed) {\n                return object[await context[await this.member.eval(context)]] = await value;\n            } else {\n                return object[this.member.symbol()] = await value;\n            }\n        }\n    },\n\n    ArrayExpression: class {\n\n        constructor(elements) {\n            this.elements = elements;\n        }\n\n        async eval(context) {\n            let v = 0, value = new Array(this.elements.length);\n            for (const element of this.elements) {\n                value[v++] = await element.eval(context);\n            }\n            return value;\n        }\n    },\n\n    Property: class {\n        constructor(key, value, computed) {\n            this.key = key;\n            this.value = value;\n            this.computed = computed;\n        }\n\n        eval(context) {\n            return this.computed ? this.value.eval(context).then(value => {\n                return this.key.eval(context).then(key => {\n                    return {key, value};\n                });\n            }) : this.value.eval(context);\n        }\n    },\n\n    ObjectExpression: class {\n\n        constructor(properties) {\n            this.properties = properties;\n        }\n\n        async eval(context) {\n            const value = {};\n            for (const property of this.properties) if (property.computed) {\n                value[await property.key.eval(context)] = await property.value.eval(context);\n            } else {\n                value[property.key.symbol()] = await property.value.eval(context);\n            }\n            return value;\n        }\n    }\n\n};\n"]}