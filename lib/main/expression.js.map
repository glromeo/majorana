{"version":3,"sources":["../../src/main/expression.js"],"names":["Expression","constructor","source","interpreter","parse","invoke","self","context","eval","AST","type"],"mappings":";;;;;;;AAAA;;AACA;;IAEaA,U,WAAAA,U,GAAN,MAAMA,UAAN,CAAiB;;AAEpBC,gBAAYC,MAAZ,EAAoBC,cAAc,8BAAlC,EAAqD;AACjD,aAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAKA,WAAL,CAAiBC,KAAjB,CAAuBF,MAAvB;AACH;;AAEDG,WAAOC,IAAP,EAAaC,OAAb,EAAsB;AAClB,eAAO,KAAKJ,WAAL,CAAiBK,IAAjB,CAAsBD,OAAtB,EAA+BD,IAA/B,CAAP;AACH;;AAED,eAAWG,GAAX,CAAeC,IAAf,EAAqB;AACjB,gBAAQA,IAAR;AACI,iBAAK,aAAL;AACI,+BAAOD,GAAP;AACA;AAHR;AAKH;AAjBmB,C","file":"expression.js","sourcesContent":["import {Parser} from \"./parser.js\";\nimport {Interpreter} from \"./interpreter.js\";\n\nexport class Expression {\n\n    constructor(source, interpreter = new Interpreter()) {\n        this.interpreter = interpreter;\n        this.interpreter.parse(source);\n    }\n\n    invoke(self, context) {\n        return this.interpreter.eval(context, self);\n    }\n\n    static set AST(type) {\n        switch (type) {\n            case 'interpreter':\n                Parser.AST = Interpreter;\n                break;\n        }\n    }\n}\n"]}